#!/usr/bin/env bash
set -euo pipefail

# Claude Project Initialization Helper
# Creates CLAUDE.md files and sets up projects for Claude Code

SCRIPT_NAME="$(basename "$0")"
CLAUDE_CONFIG_DIR="$HOME/.config/claude"
CLAUDE_TEMPLATE="$CLAUDE_CONFIG_DIR/CLAUDE.md.template"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

usage() {
    cat <<EOF
Usage: $SCRIPT_NAME [command] [options]

Commands:
    init [type]         Initialize CLAUDE.md in current directory
    list                List available project types
    edit                Edit CLAUDE.md in current directory
    sync                Sync CLAUDE.md from template
    help                Show this help message

Project Types:
    default             General purpose project
    nodejs              Node.js/JavaScript project
    python              Python project
    rust                Rust project
    go                  Go project
    web                 Web frontend project
    api                 API/Backend project
    database            Database-heavy project

Options:
    --force             Overwrite existing CLAUDE.md
    --sqlite <db>       Add SQLite database to project
    --no-context7       Disable Context7 in project

Examples:
    $SCRIPT_NAME init                    # Create default CLAUDE.md
    $SCRIPT_NAME init nodejs             # Create Node.js CLAUDE.md
    $SCRIPT_NAME init --sqlite app.db    # Include SQLite database
    $SCRIPT_NAME edit                    # Edit current CLAUDE.md

Notes:
    - CLAUDE.md helps Claude understand your project structure
    - Automatically detects some project types
    - Can include MCP server configurations
EOF
}

# Detect project type from files
detect_project_type() {
    if [[ -f "package.json" ]]; then
        echo "nodejs"
    elif [[ -f "Cargo.toml" ]]; then
        echo "rust"
    elif [[ -f "go.mod" ]]; then
        echo "go"
    elif [[ -f "requirements.txt" ]] || [[ -f "pyproject.toml" ]]; then
        echo "python"
    elif [[ -f "index.html" ]] || [[ -d "public" ]] || [[ -d "src" ]]; then
        echo "web"
    else
        echo "default"
    fi
}

# Generate CLAUDE.md content based on type
generate_claude_md() {
    local project_type="${1:-default}"
    local include_sqlite="${2:-}"
    local include_context7="${3:-true}"
    local project_name="$(basename "$(pwd)")"
    
    cat <<EOF
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

**Project**: $project_name
**Type**: $project_type
**Created**: $(date +"%Y-%m-%d")

[Add your project description here]

## Architecture

EOF

    # Add type-specific architecture info
    case "$project_type" in
        nodejs)
            cat <<EOF
- **Framework**: [Express/Next.js/etc.]
- **Package Manager**: [npm/yarn/pnpm]
- **Node Version**: $(node --version 2>/dev/null || echo "Not specified")
- **Main Entry**: [index.js/server.js/etc.]

### Key Dependencies
- [List main dependencies]

EOF
            ;;
        
        python)
            cat <<EOF
- **Python Version**: $(python3 --version 2>/dev/null || echo "Not specified")
- **Framework**: [Django/Flask/FastAPI/etc.]
- **Package Manager**: [pip/poetry/etc.]
- **Virtual Environment**: [venv/conda/etc.]

### Key Dependencies
- [List main dependencies]

EOF
            ;;
        
        rust)
            cat <<EOF
- **Rust Version**: $(rustc --version 2>/dev/null || echo "Not specified")
- **Build System**: Cargo
- **Target**: [binary/library]
- **Main Crate**: src/main.rs or src/lib.rs

### Key Dependencies
- [List main crates]

EOF
            ;;
        
        go)
            cat <<EOF
- **Go Version**: $(go version 2>/dev/null || echo "Not specified")
- **Module**: $(grep "^module" go.mod 2>/dev/null || echo "Not specified")
- **Main Package**: [cmd/main.go or similar]

### Key Dependencies
- [List main packages]

EOF
            ;;
        
        web)
            cat <<EOF
- **Framework**: [React/Vue/Angular/Vanilla]
- **Build Tool**: [Webpack/Vite/Parcel/etc.]
- **CSS**: [Tailwind/CSS Modules/Styled Components/etc.]
- **State Management**: [Redux/Context/Zustand/etc.]

### Project Structure
- \`/src\` - Source code
- \`/public\` - Static assets
- \`/dist\` or \`/build\` - Build output

EOF
            ;;
        
        api)
            cat <<EOF
- **Type**: REST/GraphQL/gRPC
- **Framework**: [Specify framework]
- **Database**: [PostgreSQL/MySQL/MongoDB/etc.]
- **Authentication**: [JWT/OAuth/Session/etc.]

### API Structure
- \`/routes\` or \`/api\` - API endpoints
- \`/models\` - Data models
- \`/middleware\` - Middleware functions
- \`/services\` - Business logic

EOF
            ;;
        
        database)
            cat <<EOF
- **Database Type**: [PostgreSQL/MySQL/SQLite/MongoDB/etc.]
- **ORM/ODM**: [Prisma/TypeORM/Sequelize/etc.]
- **Migration Tool**: [Specify if any]

### Database Structure
- [Describe main tables/collections]
- [Note any important relationships]

EOF
            ;;
        
        *)
            cat <<EOF
### Project Structure
- [Describe your project structure]
- [List main directories and their purposes]

EOF
            ;;
    esac

    cat <<EOF
## Development Guidelines

1. **Code Style**
   - Follow existing patterns and conventions
   - Use the project's linter/formatter settings
   - Maintain consistent naming conventions

2. **Testing**
   - Write tests for new functionality
   - Run existing tests before committing
   - Test command: \`[npm test/cargo test/etc.]\`

3. **Security**
   - Never commit sensitive data or credentials
   - Use environment variables for configuration
   - Follow security best practices for $project_type

4. **Dependencies**
   - Check if a dependency exists before adding new ones
   - Prefer well-maintained, popular packages
   - Document why new dependencies are needed

## Available MCP Servers

EOF

    # Add MCP server info
    if [[ -n "$include_sqlite" ]]; then
        cat <<EOF
### SQLite Database
- **Database**: $include_sqlite
- **Access**: Read/write operations available
- **Usage**: Claude can query and analyze the database directly

EOF
    fi

    if [[ "$include_context7" == "true" ]]; then
        cat <<EOF
### Context7 Documentation
- **Usage**: Add "use context7" to prompts for up-to-date docs
- **Libraries**: Access to 20,000+ library documentations
- **Example**: "Create a React component with hooks. use context7"

EOF
    fi

    cat <<EOF
## Commands

### Common Commands
\`\`\`bash
# Development
[Add your common dev commands]

# Testing
[Add your test commands]

# Building
[Add your build commands]

# Deployment
[Add your deployment commands]
\`\`\`

## Environment Variables

\`\`\`bash
# Required
[List required env vars]

# Optional
[List optional env vars]
\`\`\`

## Notes

- [Add any project-specific notes]
- [Known issues or limitations]
- [Special considerations]

---
*Generated by claude-project on $(date +"%Y-%m-%d")*
EOF
}

# Initialize CLAUDE.md in current directory
init_claude_md() {
    local force=false
    local project_type=""
    local sqlite_db=""
    local include_context7=true
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --force)
                force=true
                shift
                ;;
            --sqlite)
                sqlite_db="$2"
                shift 2
                ;;
            --no-context7)
                include_context7=false
                shift
                ;;
            *)
                project_type="$1"
                shift
                ;;
        esac
    done
    
    # Check if CLAUDE.md exists
    if [[ -f "CLAUDE.md" ]] && [[ "$force" != "true" ]]; then
        log_error "CLAUDE.md already exists. Use --force to overwrite."
        exit 1
    fi
    
    # Auto-detect type if not specified
    if [[ -z "$project_type" ]]; then
        project_type=$(detect_project_type)
        log_info "Detected project type: $project_type"
    fi
    
    # Validate project type
    case "$project_type" in
        default|nodejs|python|rust|go|web|api|database)
            ;;
        *)
            log_error "Unknown project type: $project_type"
            echo "Use '$SCRIPT_NAME list' to see available types"
            exit 1
            ;;
    esac
    
    # Check SQLite database if specified
    if [[ -n "$sqlite_db" ]] && [[ ! -f "$sqlite_db" ]]; then
        log_warn "SQLite database not found: $sqlite_db"
        read -p "Create it? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            touch "$sqlite_db"
            log_info "Created SQLite database: $sqlite_db"
        fi
    fi
    
    # Generate CLAUDE.md
    log_info "Creating CLAUDE.md for $project_type project..."
    generate_claude_md "$project_type" "$sqlite_db" "$include_context7" > CLAUDE.md
    
    log_info "CLAUDE.md created successfully!"
    
    # Add SQLite MCP if specified
    if [[ -n "$sqlite_db" ]]; then
        echo
        log_info "To enable SQLite access in Claude:"
        echo "  claude-mcp sqlite $(basename "$sqlite_db" .db) $sqlite_db"
    fi
    
    echo
    echo "Next steps:"
    echo "1. Edit CLAUDE.md to add project-specific details"
    echo "2. Run 'claude' in this directory to start coding"
}

# List available project types
list_project_types() {
    echo "Available project types:"
    echo
    echo "  default    - General purpose project"
    echo "  nodejs     - Node.js/JavaScript project"
    echo "  python     - Python project"
    echo "  rust       - Rust project"
    echo "  go         - Go project"
    echo "  web        - Web frontend project"
    echo "  api        - API/Backend project"
    echo "  database   - Database-heavy project"
    echo
    echo "Usage: $SCRIPT_NAME init [type]"
    echo "If no type specified, auto-detection will be used."
}

# Edit CLAUDE.md
edit_claude_md() {
    if [[ ! -f "CLAUDE.md" ]]; then
        log_error "No CLAUDE.md found in current directory"
        echo "Run '$SCRIPT_NAME init' to create one"
        exit 1
    fi
    
    # Use EDITOR or fall back to common editors
    local editor="${EDITOR:-}"
    if [[ -z "$editor" ]]; then
        for cmd in nvim vim nano; do
            if command -v "$cmd" &> /dev/null; then
                editor="$cmd"
                break
            fi
        done
    fi
    
    if [[ -z "$editor" ]]; then
        log_error "No editor found. Set EDITOR environment variable."
        exit 1
    fi
    
    "$editor" CLAUDE.md
}

# Main command handler
case "${1:-init}" in
    init)
        shift
        init_claude_md "$@"
        ;;
    
    list)
        list_project_types
        ;;
    
    edit)
        edit_claude_md
        ;;
    
    sync)
        log_error "Sync command not yet implemented"
        exit 1
        ;;
    
    help|--help|-h)
        usage
        ;;
    
    *)
        log_error "Unknown command: $1"
        echo
        usage
        exit 1
        ;;
esac