#!/usr/bin/env bash
set -euo pipefail

# Claude MCP Server Management
# Manages Model Context Protocol servers for Claude Code

SCRIPT_NAME="$(basename "$0")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

usage() {
    cat <<EOF
Usage: $SCRIPT_NAME <command> [options]

Commands:
    list                List all configured MCP servers
    add <type> <args>   Add a new MCP server
    remove <name>       Remove an MCP server
    status              Check MCP server status
    sqlite <name> <db>  Quick add SQLite database
    context7            Enable Context7 documentation server
    help                Show this help message

Server Types:
    sqlite              SQLite database server
    context7            Up-to-date documentation server
    filesystem          Filesystem access server
    http                HTTP endpoint server

Examples:
    $SCRIPT_NAME sqlite myapp ~/databases/myapp.db
    $SCRIPT_NAME context7
    $SCRIPT_NAME add filesystem --path ~/projects --path /tmp
    $SCRIPT_NAME list
    $SCRIPT_NAME remove sqlite-myapp

Notes:
    - Uses Claude Max subscription (no API key required)
    - Servers are configured at user scope by default
    - SQLite databases are accessed via npx (no Python required)
EOF
}

# List MCP servers
list_mcp_servers() {
    log_info "Checking MCP servers..."
    
    # Check if Claude is installed
    if ! command -v claude &> /dev/null; then
        log_error "Claude CLI not found. Please install claude-code."
        exit 1
    fi
    
    # List servers using Claude CLI
    claude mcp list 2>/dev/null || {
        log_warn "No MCP servers configured. Use '$SCRIPT_NAME add' to add servers."
        echo
        echo "Quick start:"
        echo "  $SCRIPT_NAME context7              # Add documentation server"
        echo "  $SCRIPT_NAME sqlite mydb ~/db.db   # Add SQLite database"
    }
}

# Add Context7 server
add_context7() {
    log_info "Adding Context7 documentation server..."
    
    # Add via Claude CLI
    claude mcp add --transport stdio --scope user context7 npx -y @upstash/context7-mcp || {
        log_error "Failed to add Context7 server"
        exit 1
    }
    
    log_info "Context7 server added successfully!"
    echo
    echo "Usage in Claude:"
    echo "  Just add 'use context7' to any prompt to fetch up-to-date docs"
    echo
    echo "Example prompts:"
    echo "  - Create a Next.js 14 app router project. use context7"
    echo "  - How do I use React hooks? use context7"
    echo "  - Write a MongoDB aggregation pipeline. use context7"
}

# Add SQLite server
add_sqlite() {
    local name="$1"
    local db_path="$2"
    
    # Validate inputs
    if [[ -z "$name" ]] || [[ -z "$db_path" ]]; then
        log_error "Usage: $SCRIPT_NAME sqlite <name> <database-path>"
        exit 1
    fi
    
    # Expand path
    db_path=$(eval echo "$db_path")
    
    # Check if database exists
    if [[ ! -f "$db_path" ]]; then
        log_warn "Database file not found: $db_path"
        read -p "Create new database? (y/N) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            touch "$db_path"
            log_info "Created new SQLite database: $db_path"
        else
            exit 1
        fi
    fi
    
    log_info "Adding SQLite server '$name' for database: $db_path"
    
    # Add via Claude CLI
    claude mcp add --transport stdio --scope user "sqlite-$name" npx -y @modelcontextprotocol/server-sqlite --db-path "$db_path" || {
        log_error "Failed to add SQLite server"
        exit 1
    }
    
    log_info "SQLite server 'sqlite-$name' added successfully!"
    echo
    echo "The server provides:"
    echo "  - SQL query execution"
    echo "  - Schema exploration"
    echo "  - Data analysis capabilities"
    echo "  - Business insights generation"
}

# Remove MCP server
remove_mcp_server() {
    local name="$1"
    
    if [[ -z "$name" ]]; then
        log_error "Usage: $SCRIPT_NAME remove <server-name>"
        exit 1
    fi
    
    log_info "Removing MCP server: $name"
    
    claude mcp remove "$name" || {
        log_error "Failed to remove server '$name'"
        exit 1
    }
    
    log_info "Server '$name' removed successfully"
}

# Check MCP status
check_status() {
    log_info "MCP Server Status"
    echo
    
    # Check Claude installation
    if command -v claude &> /dev/null; then
        echo -e "${GREEN}✓${NC} Claude CLI installed: $(claude --version)"
    else
        echo -e "${RED}✗${NC} Claude CLI not found"
        exit 1
    fi
    
    # Check Node.js (required for npx)
    if command -v node &> /dev/null; then
        echo -e "${GREEN}✓${NC} Node.js installed: $(node --version)"
    else
        echo -e "${RED}✗${NC} Node.js not found (required for MCP servers)"
    fi
    
    # Check for API key (should not be set)
    if [[ -n "${ANTHROPIC_API_KEY:-}" ]]; then
        echo -e "${YELLOW}⚠${NC} ANTHROPIC_API_KEY is set (not needed for Claude Max)"
    else
        echo -e "${GREEN}✓${NC} No API key configured (using Claude Max subscription)"
    fi
    
    echo
    log_info "Configured MCP servers:"
    list_mcp_servers
}

# Main command handler
case "${1:-help}" in
    list)
        list_mcp_servers
        ;;
    
    sqlite)
        shift
        add_sqlite "$@"
        ;;
    
    context7)
        add_context7
        ;;
    
    add)
        shift
        log_error "Generic 'add' command not yet implemented"
        echo "Use specific commands instead:"
        echo "  $SCRIPT_NAME sqlite <name> <db-path>"
        echo "  $SCRIPT_NAME context7"
        exit 1
        ;;
    
    remove)
        shift
        remove_mcp_server "$@"
        ;;
    
    status)
        check_status
        ;;
    
    help|--help|-h)
        usage
        ;;
    
    *)
        log_error "Unknown command: $1"
        echo
        usage
        exit 1
        ;;
esac